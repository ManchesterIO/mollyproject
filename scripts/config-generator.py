#!/usr/bin/env python

import sys
import os.path

try:
    import readline
except ImportError:
    pass

config = """# This file is automatically generated by the Molly Project
# Please see http://docs.mollyproject.org/ for reference documentation

from oauth.oauth import OAuthSignatureMethod_PLAINTEXT
import os.path, imp
from molly.conf.settings import Application, extract_installed_apps, Authentication, ExtraBase, Provider
from molly.utils.media import get_compress_groups

molly_root = imp.find_module('molly')[1]
project_root = os.path.normpath(os.path.dirname(__file__))

"""

def ask(question, default=None, compulsory=False, restrict=None):
    print
    
    def do_ask(to_ask, default):
        answer = raw_input(to_ask)
        if answer == '' and default != None:
            return default
        elif answer == '':
            return None
        else:
            return answer
    
    if default is None:
        to_ask = question + ': '
    else:
        to_ask = question + ' [' + default + ']: '
    
    answer = do_ask(to_ask, default)
    while compulsory and answer is None:
        print "An answer to this question is compulsory"
        answer = do_ask(to_ask, default)
    
    while restrict != None and answer not in restrict:
        print "This is not an allowed answer"
        answer = do_ask(to_ask, default)
    
    return answer

# Show startup image here

#if os.path.exists('settings.py'):
#    print "Cannot continue - a settings.py file already exists"
#    sys.exit()
#else:
settings_fd = open('settings.py', 'w')
    
print """
Welcome to the Molly configuration generator

You will be asked a number of questions relating to how you would like Molly to
be configured. Once complete, you will end up with a file called settings.py
in your current directory

--------------------------------------------------------------------------------

Let's get started with some basic questions.

First, we need to define some administrators for your site. Each administrator
will require a full name and e-mail address.
"""

# Get administrators
def get_admin(required=False):
    
    if not required:
        print "If you do not want to define any more administrators, you can just"
        print "press the Enter key to continue"
        compulsory = False
    else:
        compulsory = True
    
    admin_name = ask('Administrator Name', compulsory=compulsory)
    if admin_name is None:
        return
    else:
        admin_email = ask('Administrator Email', compulsory=True)
        next = get_admin()
        if next is None:
            return [(admin_name, admin_email)]
        else:
            return [(admin_name, admin_email)] + next

config += 'ADMINS = (\n'
for admin_name, admin_email in get_admin(True):
    config += "    ('%s', '%s'),\n" % (admin_name, admin_email)
config += """)

MANAGERS = ADMINS
"""

# Debug mode

print """
Would you like to run Molly in debug mode? This is useful as you get started,
but is not recommended in a production environment.

Acceptable answers are: y or n"""
debug = {
    'y': 'True',
    'n': 'False',
}[ask('Enable debug mode?', 'y', False, ['y', 'n'])]

config += """
# DEBUG mode is not recommended in production
"""
config += "\nDEBUG = %s\n" % debug
config += "DEBUG_SECURE = DEBUG\n"
config += "TEMPLATE_DEBUG = DEBUG\n"

config += """

# The following settings are sensible defaults. Change if need be. 
LANGUAGE_CODE = 'en-gb'
TIME_ZONE = 'Europe/London'
USE_I18N = True
SITE_ID = 1

# Molly can automatically generate the urlpatterns, so it's recommended by
# default to use Molly's urls.py. This doesn't work if you have non-Molly apps
# and may require a custom urls.py to be written
ROOT_URLCONF = 'molly.urls'
"""

# Databases - assume PostGIS

# Cache dir

# API keys

# Applications

# Home application - always

# Desktop application - ask for settings - blog feed, Twitter, blog URL (to ignore)
# need to check which of these are optional or not tbh
# optional

# Contact Search (with MIT's LDAP provider) - optional

# Library search - optional
# Need: Z39.50 host, database, syntax, port (210), charset(UTF-8)

# Podcasts - optional
# URL to OPML (optional)
# URLs of RSS feed (optional)
# URLs of podcast producer feeds (optional)

# Webcams - optional

# Weather - optional, BBC location ID

# Service status - optional, RSS feeds

# Search - always - GSA Provider = optional

# Feeds always

# News - optional

# Events - optional

# Maps - always

# Geolocation - always
# ask if there's a longitude, latitude, distance preference
# Cloudmade (only if API key set earlier) - limit to locality?

# Feedback - always

# Feature suggestions - always

# External media - always

# WURFL - always (expose view)

# Stats (ask)

# Molly utilities - always

# Feature Vote - always

# Auth - always

# Sakai - ask (including simplied OAuth config) - ask for host, service_name,
# which tools to be enabled (signup, poll)

# Places - always, start with some default nearby-entity-types, configure more
# later, no associations, configure more later
# ACIS Live? y/n
# BBC TPEG y/n - UK wide or limit to county?
# LDB - do you have a token?
# Naptan - which areas? (default to HTTP)
# OSM - longitude/latitude (compute +/- automatically)
# Postcodes (postal region)

# Transport y/n
#  train station CRS code?
#  show nearby bus stops? (how many?)
#  show travel alerts?

# Middleware - will need to know if stats app is enabled, as this changes if the
# middleware is included or not, also, need to ask if we want Molly to handle
# errors (E-mail errors)

# Template context processors - will need to know if Google Analytics is used
# earlier

# Static files, etc
config += """
# This setting defines where Django looks for templates when searching - it
# assumes your overriding templates are defined in '/your/project/templates'
# and you want to have the Molly defaults as a fallback
TEMPLATE_DIRS = (
    os.path.join(project_root, 'templates'),
    os.path.join(molly_root, 'templates'),
)

# This setting changes how Django searches for templates when rendering. The
# default is fine
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
    'django.template.loaders.eggs.load_template_source',
    'molly.utils.template_loaders.MollyDefaultLoader'
)

# Non-Molly apps get added here (plus, tell Django about Molly apps)
INSTALLED_APPS = extract_installed_apps(APPLICATIONS) + (
    'django.contrib.auth',
    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.gis',
    'django.contrib.comments',
    'molly.batch_processing',
    'staticfiles',
    'compress',
    'south',
)

# Defines where markers get generated
MARKER_DIR = os.path.join(CACHE_DIR, 'markers')

# This shouldn't need changing
SRID = 27700

# Settings relating to staticfiles
STATIC_ROOT = os.path.join(project_root, 'media') # the location on disk where media is stored
STATIC_URL = '/media/' # The URL used to refer to media
STATICFILES_DIRS = (
    ('', os.path.join(project_root, 'site_media')), # Custom overriding
    ('', os.path.join(molly_root, 'media')), # Molly default media
    ('markers', MARKER_DIR), # Markers
)
ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'

# Settings relating to django-compress
COMPRESS_SOURCE = STATIC_ROOT
COMPRESS_ROOT = STATIC_ROOT
COMPRESS_URL = STATIC_URL
COMPRESS_CSS, COMPRESS_JS = get_compress_groups(STATIC_ROOT)
COMPRESS_CSS_FILTERS = ('molly.utils.compress.MollyCSSFilter',) # CSS filter is custom-written since the provided one mangles it too much
COMPRESS_CSSTIDY_SETTINGS = {
    'remove_bslash': True, # default True
    'compress_colors': True, # default True
    'compress_font-weight': True, # default True
    'lowercase_s': False, # default False
    'optimise_shorthands': 0, # default 2, tries to merge bg rules together and makes a hash of things
    'remove_last_': False, # default False
    'case_properties': 1, # default 1
    'sort_properties': False, # default False
    'sort_selectors': False, # default False
    'merge_selectors': 0, # default 2, messes things up
    'discard_invalid_properties': False, # default False
    'css_level': 'CSS2.1', # default 'CSS2.1'
    'preserve_css': False, # default False
    'timestamp': False, # default False
    'template': 'high_compression', # default 'highest_compression'
}
COMPRESS_JS_FILTERS = ('compress.filters.jsmin.JSMinFilter',)
COMPRESS = not DEBUG     # Only enable on production (to help debugging)
COMPRESS_VERSION = True  # Add a version number to compressed files.
"""

# Write out config
settings_fd.write(config)
settings_fd.close()

print """
Please note that this configuration script does not cover all possible
settings or configurations of Molly, and more advanced setup may require
editing the resulting file directly. Please read the documentation for a
full reference of the available settings

Thanks for configuring Molly!
"""