Installation
============

Molly is intended to be used with virtualenv and pip. However, before dealing
with the Python side of the installation you'll need to install the following
Debian packages or their equivalents for your distribution or OS:

 * postgis
 * python-gdal
 * proj
 * libgeos-3.0.0 or higher
 * binutils
 * libgdal1-1.5.0
 * postgresql-8.3
 * postgresql-8.3-postgis
 * postgresql-server-dev-8.3
 * python-virtualenv
 * python-setuptools
 * python-dev
 * libxslt-dev
 * libldap2-dev
 * libsasl2-dev

Unfortunately, pip isn't yet in Debian stable, so you'll need to install it
using easy_install:

 $ aptitude install python-setuptools
 $ easy_install pip

On Fedora, this list is:

 * python-virtualenv
 * python-pip
 * libxml-devel
 * libxslt-devel
 * python-devel
 * postgresql-devel
 * openldap-devel
 * openssl-devel
 * postgis
 * gdal-python
 * proj
 * postgresql-server
 * geos
 * httpd
 * libjpeg-devel

Next, you'll want to deploy Molly, this can be done in the usual way. This uses
setuptools to install all your dependencies. If you just want to play with
Molly, then it may make more sense to set up a virtualenv[1] and install Molly
into that.

Unfortunately, one of the dependencies on PyPI is actually broken - you will
need to install a fixed version from http://github.com/alexdutton/PyZ3950/
BEFORE running the setup script, otherwise the broken version will get
installed:

 $ pip install git+http://github.com/alexdutton/PyZ3950.git

 $ python setup.py install

If you don't have network access, you will need to install the following Python
packages manually (from PyPI unless otherwise listed):

 * Levenshtein (SVN at http://pylevenshtein.googlecode.com/svn/trunk)
 * pywurfl
 * ply
 * feedparser
 * simplejson
 * rdflib
 * pytz
 * python-dateutil
 * Django
 * oauth (version 1.0.1)
 * psycopg2
 * PIL
 * lxml
 * python-ldap
 * django-compress
 * python-memcached
 * django-staticfiles

You'll then need to set up the database as below, and configure a deployment
of Molly. A simple deployment is provided in demo/. You'll need to give
settings.py a once over, and then build the media for the site:

 $ python manage.py build_static --noinput
 $ python manage.py synccompress
 $ python manage.py generate_markers

You will also need to set up the cron jobs required for batch processing to
work. If you don't have a crontab at present, simply running:

 $ PYTHONPATH=.. python manage.py create_crontab | crontab

will do the job, if not, don't pipe it to crontab and then add the required
lines by hand. Once this is done, you can finally start a test server.

 $ python manage.py runserver

Database
--------

There are two ways to create the PostGIS template used by a molly installation:

 * Run one of the scripts in scripts/ as the postgis user.
OR
 * Follow the instructions at
   http://geodjango.org/docs/install.html#creating-a-spatial-database-template-for-postgis

The first one is likely the simpler, but if it fails the latter will provide
more information to get it working.

Once this is done, you should create the molly database as a DB superuser
(e.g. as postgres) by executing the following:

 $ createdb -T template_postgis molly

As a DB superuser, create the molly user:

(Make sure the password is the one given in settings.py in the demo folder)

 $ createuser molly -P
 Enter password for new role:
 Enter it again:
 Shall the new role be a superuser? (y/n) n
 Shall the new role be allowed to create databases? (y/n) n
 Shall the new role be allowed to create more new roles? (y/n) n


Now edit pg_hba.conf (usually in /var/lib/pgsql/data) on Fedora systems, and
/etc/postgresql/8.3/main/ on Debian systems) to allow passworded logins from
the new user by adding the following line somewhere near the top.

 local molly molly md5

Order is important, so it needs to go above any more general access directives.

Log in to the server as postgres and allow the user access to the database:

 $ psql molly
 Welcome to psql 8.3.7, the PostgreSQL interactive terminal.

 Type:  \copyright for distribution terms
        \h for help with SQL commands
        \? for help with psql commands
        \g or terminate with semicolon to execute query
        \q to quit

 molly=# grant all on database molly to molly;
 GRANT
 molly=# ^D

Either send SIGHUP or restart the server to reload pg_hba.conf

Change directory to your project directory and use manage.py to initialise the
database:

 $ cd /path/to/molly/project/
 $ python manage.py syncdb

It should ask you to create a new superuser. Say yes and set one up.

The site also requires a cache directory, currently /var/cache/molly.
Create this directory and give user www-data and/or your developer users/group
all permissions to do things to it.

[1] http://pypi.python.org/pypi/virtualenv