Installing Molly
================

Getting the Code
----------------

Molly extends the standard ``setup.py`` in order to add additional functionality
to make working with Molly easier.

First off, you will need a checkout of Molly. You can either grab a tarball from
the `Downloads part of Github <https://github.com/mollyproject/mollyproject/archives/master>`_,
and unzip that::

    wget --no-check-certificate https://github.com/mollyproject/mollyproject/tarball/master
    tar zxvf https://github.com/mollyproject/mollyproject/tarball/master

Or clone the Git repository directly::

    git clone git://github.com/mollyproject/mollyproject.git

(note that you may have to install Git for this to work)

The links above will get the latest "unstable" version of Molly, you may wish to
select a specific version from the
`download page <https://github.com/mollyproject/mollyproject/archives/master>`_,
or checkout a specific branch from Git (e.g., git checkout molly1.2).

Preparing your system
---------------------

Molly requires some system library and packages to be installed in order to
function correctly. If you are on CentOS 5, Fedora, Ubuntu 10.04 or 10.10, then
running ``./setup.py sysprep`` as root will automatically install these
dependencies for you.

If your system isn't one of those supported, then you will need to ensure the
following packages, or their equivalent on your platform, are available:

* python-virtualenv
* python-pip
* libxml-devel
* libxslt-devel
* python-devel
* postgresql-devel
* openldap-devel
* openssl-devel
* postgis
* gdal-python
* proj
* postgresql-server
* geos
* httpd
* libjpeg-devel
* imagemagick
* gcc
* make
* git

Configuring PostgreSQL
----------------------

Creating your database
----------------------

Creating a site template
------------------------

Once your site template has been created, the following files are created which
are only templates and require you to edit them:

 * ``settings.py`` - following the configuration guide;
 * ``apache/molly.wsgi`` - if you are deploying Molly as a WSGI app, then you
   will need to change the DJANGO_SETTINGS_MODULE setting in this file;
 * ``apache/httpd.conf`` - this is a sample Apache config file;
 * ``templates/base.html`` - this is a sample template override - for more
   information about this, please see the customising guide.

You will also have a ``compiled_media`` folder, which should be ignored, and a
``site_media`` folder, which is where you should put any overrides for media on
your site.

Creating a Virtualenv for Molly
-------------------------------

Molly operates from a virtualenv, which allows for specific dependencies to be
tracked without interfering with your system-wide Python installation.

.. note:: If you have virtualenvwrapper installed, Molly will use that to
          create your virtualenv.

In order to create your virtualenv, the command ``./setup.py createvirtualenv``
can be used. This command takes one compulsory argument, ``-i PATH``, which
specifies the path to create the virtualenv in.

Deploying Molly
---------------

Once you have configured your site appropriately and created a Virtualenv for
Molly to be installed into, you're almost ready to deploy your site!

This can be done using the command ``./setup.py deploy``. This command takes a
number of compulsory arguments:

* ``-s PATH``: The path to the site to deploy (i.e., the one created using the
  sitestart command above)
* ``-i PATH``: The path of the virtualenv to install into.

You now have an install of Molly ready to serve to the world. The recommended
way of doing this is by using Apache and mod_wsgi. The site template created by
the installer consists of a WSGI script and a sample Apache config in the
apache/ directory of your site.

The `mod_wsgi <http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango>`_
documentation goes into considerable detail about how to deploy a Django
application.

Developing Molly
----------------

In order to support developing Molly, the following option ``-d`` is available
on ``./setup.py deploy``. This will install Molly and your site in a development
mode and start Django's development server. In this mode, changes to your CSS,
images and JavaScript will be immediately shown without having to re-run the
deploy command, and any time any Python code is changed, this is automatically
reloaded.

In this mode, Molly and your site are run from their source locations, not their
installed locations, so you can edit them in-place and see the results
immediately in the development server. Additionally, verbose logging output is
printed to stdout, which allows you to debug an issues that are occurring with
Molly.

A number of additional options are available here too:

* ``-p PORT``: The port which the development server should start on (defaults
  to 8000)
* ``-x``: This indicates the development server should start on a port which is
  externally visible (for testing purposes only)

Updating Molly
--------------

To update Molly using the quick-installer, you simply need to run the
quickinstall script from the new version pointing it to the same location. This
will recognise that the installation already exists and will update as
appropriate.

When you are asked for Molly's database name, if you created the database using
the quick installer, this will default to 'molly'.

The Hard Way
------------

If you can't, or don't want to, use the Molly quick installer, you can install
Molly by hand as a standard Python package.

System Prerequisites
""""""""""""""""""""


You need to decide how you would like Molly to be installed - globally on the
system, or to a directory using a Python virtualenv. If you decide to install it
into a Python virtualenv, then you can create one like so::

    virtualenv --distribute --no-site-packages PATH-TO-DIRECTORY
    source PATH-TO-DIRECTORY/bin/activate

(note, if you're installing Molly globally, some systems call "pip"
"pip-python", so you may need to use that instead)

Molly uses forks of 2 packages in PyPI so these must be manually installed
first::

    pip install -U git+http://github.com/oucs/PyZ3950.git#egg=PyZ3950
    pip install -U git+git://github.com/mikelim/django-compress.git#egg=django-compress

And sometimes PIL fails to install when being installed as a dependency, so::

    pip install -U PIL

Now you are ready to install Molly. This can be done by running::

    python setup.py install

in the Molly directory. This will install Molly in your environment, as well as
pulling in any further dependencies, and you're almost ready to go.

The next step is to prepare the Postgres database for Molly. You will first need
to create a spatial template
(`the Django documentation covers how to do this <http://docs.djangoproject.com/en/dev/ref/contrib/gis/install/#spatialdb-template>`_),
and then use this to create a database for Molly::

    sudo -u postgres createdb -T template_postgis molly

You'll then need to create a user for Molly to connect as::

    sudo -u postgres createuser molly -P

You will be asked to enter a password, and you can choose 'n' for the remaining
questions. You will also need to configure Postgres for MD5 based
authentication. This can be done by adding the following line::

    local       molly        molly                md5

to the pg_hba.conf (in /var/lib/pgsql/data on Fedora/Red Hat,
/etc/postgresql/8.4/main on Ubuntu/Debian) - above the lines ending "ident".

Finally, you'll need to give the molly user access to the molly database::

    sudo -u postgres psql -c "GRANT ALL ON DATABASE molly TO molly;"

Once this is done, you're now ready to configure Molly. If you don't already
have a Molly site, you will need to create one to do this, this can be done by
running::

    django-admin createproject site

Which will create a site in a folder called "site". You will then need to
configure this to use Molly (the :doc:`configuring guide <tutorial/configuring>`
may help you, or alternatively the config_generator.py script in the scripts/
folder will generate a typical settings.py).

Once you have a site, you need to update the database. If you're installing into
a blank database, run the following commands in the site folder::

    python manage.py syncdb --all
    python manage.py migrate --fake

You should also be asked to create a superuser. Never run those commands on an
instantiated database though, otherwise it may become out of sync. If your
database is not blank, then run::

    python manage.py syncdb
    python manage.py migrate

At this point, you should also make sure that the cache directory exists, and is
writeable to the user Molly is running as.

You can now build Molly's media::

    python manage.py update_wurfl
    python manage.py collectstatic
    python manage.py synccompress
    python manage.py generate_cache_manifest
    python manage.py generate_markers

And, if you would like the batch jobs to run when scheduled::

    python manage.py create_crontab | crontab

And tada! Molly is installed and ready to go (so configure Apache, or run the
development server: python manage.py runserver)