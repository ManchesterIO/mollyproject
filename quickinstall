#!/usr/bin/env python

import platform
import sys
import os
import os.path
import pwd
from subprocess import Popen, PIPE
import string
from random import choice
from optparse import OptionParser
import tempfile
import shutil
import urllib2

from scripts import config_generator
from molly.wurfl.context_processors import parse_version

# Dependencies and distro support basically relies on these - can tweak them here
packagekit_packages = {
    'Fedora': [
            'python-virtualenv',
            'python-pip',
            'libxml-devel',
            'libxslt-devel',
            'python-devel',
            'postgresql-devel',
            'openldap-devel',
            'openssl-devel',
            'postgis',
            'gdal-python',
            'proj',
            'postgresql-server',
            'geos',
            'httpd',
            'libjpeg-devel',
            'imagemagick',
            'gcc',
            'make',
            'git',
        ],
    'redhat': [
            'python26',
            'git',
            'python-setuptools',
            'python26-devel',
            'binutils',
            'libxslt-devel',
            'cyrus-sasl-devel',
            'openldap-devel',
            'ImageMagick',
            'python-virtualenv',
            'python-pip',
            'proj',
            'proj-devel',
            'postgresql',
            'postgresql-server',
            'postgresql-devel',
            'postgresql-contrib',
            'geos-3.1.0',
            'geos-devel-3.1.0',
            'postgis',
            'gdal',
            'libjpeg-devel',
            'make',
            'gcc',
            'openssl-devel',
        ],
}

apt_packages = {
    ('Ubuntu', '10.04'): [
            'python-pip',
            'build-essential',
            'postgis',
            'python-gdal',
            'proj',
            'libgeos-3.1.0',
            'binutils',
            'libgdal1-1.6.0',
            'postgresql-8.4',
            'postgresql-8.4-postgis',
            'postgresql-server-dev-8.4',
            'python-setuptools',
            'python-dev',
            'libxslt-dev',
            'libldap2-dev',
            'libsasl2-dev',
            'libjpeg-dev',
            'imagemagick',
            'git-core',
        ],
    ('Ubuntu', '10.10'): [
            'python-pip',
            'build-essential',
            'postgis',
            'python-gdal',
            'proj',
            'libgeos-3.2.0',
            'binutils',
            'libgdal1-1.6.0',
            'postgresql-8.4',
            'postgresql-8.4-postgis',
            'postgresql-server-dev-8.4',
            'python-setuptools',
            'python-dev',
            'libxslt-dev',
            'libldap2-dev',
            'libsasl2-dev',
            'libjpeg-dev',
            'imagemagick',
            'git-core',
        ],
}

pip_packages = [
    ('PyZ3950', 'git+http://github.com/oucs/PyZ3950.git'), # Custom PyZ3950, contains some bug fixes
    ('django-compress', 'git+git://github.com/mikelim/django-compress.git#egg=django-compress'), # Fork of django-compress contains some extra features we need
    ('PIL', 'PIL'), # Because it doesn't install properly when called using setuptools...
]

postgis_paths = {
    'redhat': '/usr/share/pgsql/postgresql/contrib',
    'Fedora': '/usr/share/pgsql/contrib/postgis-1.5',
    'Ubuntu': '/usr/share/postgresql/8.4/contrib',
    ('Ubuntu', '10.10'): '/usr/share/postgresql/8.4/contrib/postgis-1.5'
}

pg_hba_paths  = {
    'redhat': '/var/lib/pgsql/data/pg_hba.conf',
    'Fedora': '/var/lib/pgsql/data/pg_hba.conf',
    'Ubuntu': '/etc/postgresql/8.4/main/pg_hba.conf'
}

def generate_password():
    return ''.join([choice(string.letters + string.digits) for i in range(18)])

def reload_postgres(distribution):
    postgres_init_path = {
        ('Ubuntu', '10.04'): '/etc/init.d/postgresql-8.4',
    }.get(distribution, '/etc/init.d/postgresql')
    Popen([postgres_init_path, 'restart'], stdout=PIPE).communicate()

print """
                                 ;Ok;                                         
                                 lMM:                                         
                                .0MX.                                         
                                ;WMx                                          
                 .xx,           dMW;                                          
                 .oWWd.        .XM0.                                          
                   ,0M0,       ;MMo          .;xKx.                           
                    .oWWl      oMN'       .,dXMNx;.                           
                      ,0Wx.    ,dc.    .;dXMNk:.                              
   ;KX0d:.             .d0:           .XMNk:.                                 
   ;OXMMMK;  ..',..                   .;;.              ...   ...             
     .,0MMNx0NMMMMN0l.  .;ok000xc.                     dWWk. :NMK'            
       .KMMMMXkddONMMXllKMMWXKNMMNo.    .:ooc:;'..     xMMW, cMMMl            
      ;KMMMMd.    .OMMMMMXo'. .oMMMd.   .oOKXWMMMK.   .OMMN. lMMMc            
    .xWMMWMMx      :WMMMd.     .kMMW;       ...,;.    ;WMMx .KMMX.            
   .KMMWlkMM0    .lWMMMMc       :MMMd                .kMMW, :MMMo             
  .OMMX; dMM0    lMMMMMMd       ,MMMx     'ldkxo:.   ,WMMx  kMMX..cl'    .cl' 
 .xMMN,  xMM0   ;WMMkNMMd       ;MMMd    lWMMMMMMK,  dMMW, 'WMMl xMM0.   dMMO 
 :WMW:  .0MMx  'XMMx,WMMo       oMMMc 'oxWMMK,;XMMK..KMMk. dMMX..NMMo   .OMMk 
;0MMx   ,WMMc  xMMK.cMMM:      .KMMX. OMMMMMMWKKMMW';MMM: .KMMd :MMM,   :WMMx 
dMMM;  .kMM0. 'WMMc.0MMN.      :MMMo .NMMd:dkOOWMMK.dMMK. :MMM; oMMN.  ,XMMMo 
xMMW, .dMMW,  :MMW'oMMMo      .KMM0. .XMMk.  .xMMW: OMMx  oMMX. lMMN..:NMMMM: 
cXMMOl0MMWc   ;MMM0WMWd.     .0MMX'   oMMMOodKMMX:..0MMx  dMMX. 'NMM0KMMMMMW' 
 'OMMMMWO,    .oNMMM0:.      cWM0'    .cKWMMMMKl.   lWMx  ,XMX.  'OWMMXxXMMO. 
  .'::;.        .,,..         ...       ..,;,..      ...   ... .':lkK0kkWMM:  
                                                            .,xXMMMMMWMMMMM0, 
                                                           .dWMMKdc,.:XMMWMMNo
                                                           cMMWc.  .xWMMK;xXOc
                                                           cMMWkoxOWMMKl.     
                                                           .oNMMMMWKd,.       
                                                             :dOOxl           

Welcome to the Molly Installer!

http://mollyproject.org/
"""

# This doesn't appear to be Linux
if not hasattr(platform, 'linux_distribution'):
    if not hasattr(platform, 'dist'):
        print "At the moment, this installer only supports installation on Linux"
        print "distributions. Exiting..."
        sys.exit(1)
    else:
        distribution, distribution_version, distribution_id = platform.dist()
else:
    distribution, distribution_version, distribution_id = platform.linux_distribution()

parser = OptionParser()
parser.add_option("-s", "--site-path", dest="site_path",
                  help="use the Molly site at site_path when installing, instead of the existing one", metavar="PATH")

parser.add_option("-d", "--develop", dest="develop",
                  help="do a development installation of Molly (advanced users only)", action="store_true")

parser.add_option("-n", "--no-root", dest="no_root",
                  help="never try to sudo during install (advanced users only)", action="store_true")

(options, args) = parser.parse_args()

if len(args) < 1:
    parser.error('Install destination not specified')
else:
    path = os.path.abspath(args[0])

if options.site_path != None and (not os.path.exists(options.site_path) or not os.path.isdir(options.site_path)):
    parser.error("Specified site path does not exist")

# Error if not root
if os.geteuid() != 0 and not options.develop and not options.no_root:
    parser.error("Please run this as root")

# Check if upgrading or installing
if os.path.exists(path) and not os.path.exists(os.path.join(path, 'bin', 'activate')):
    # Path exists - but not a Virtualenv
    print >>sys.stderr, "The path specified exists, but does not appear to be an install of Molly."
    print >>sys.stderr, ""
    print >>sys.stderr, "Cannot continue upgrade - exiting"
    sys.exit(1)

elif os.path.exists(os.path.join(path, 'bin', 'activate')):
    upgrading = True
    print "An installation has been detected - this will update your existing installation"

else:
    os.makedirs(path)
    upgrading = False

# Attempt to detect which distro this is and install appropriately
print "Detected Linux: %s %s (%s)" % (distribution, distribution_version, distribution_id)
print

sys_python = sys.executable

# Install prerequisites - can do this using PackageKit
if not options.develop and not options.no_root:
    
    if distribution in packagekit_packages.keys():
        
        print "Ensuring that the system prerequisites are satisfied...",
        sys.stdout.flush()
        
        # Install EPEL
        if distribution == 'redhat':
            Popen(['rpm', '-Uvh', 'http://download.fedora.redhat.com/pub/epel/' + str(parse_version(distribution_version)[0]) + '/i386/epel-release-5-4.noarch.rpm'], stdout=PIPE, stderr=PIPE).communicate()
            rpmforge = tempfile.NamedTemporaryFile()
            rpm = urllib2.urlopen('http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el5.rf.i386.rpm')
            print >>rpmforge, rpm.read()
            rpm.close()
            rpmforge.flush()
            Popen(['rpm', '-Uvh', rpmforge.name], stdout=PIPE, stderr=PIPE).communicate()
            rpmforge.close()
        
        if 'python26' in packagekit_packages[distribution]:
            sys_python = '/usr/bin/python26'
        
        # Use PackageKit to install packages
        try:
            import packagekit.client
        except ImportError:
            Popen(['yum', '-y', 'install'] + packagekit_packages[distribution], stdout=PIPE, stderr=PIPE).communicate()
            enable_postgres = True
        else:
            from packagekit.enums import FILTER_INSTALLED
            pk = packagekit.client.PackageKitClient()
            packages = pk.resolve(packagekit_packages[distribution])
            all_packages = [package.id for package in pk.get_packages(filters=FILTER_INSTALLED)]
            to_install = [package for package in packages if package.id not in all_packages]
            
            if len(to_install) == 0:
                print "All prerequisites satisfied! Continuing..."
            else:
                print "The following packages must be installed to satisfy Molly's prerequisites:"
                enable_postgres = False
                for package in to_install:
                    print " * ", package
                raw_input('Press Enter to install these packages, or Ctrl+C to exit')
                
                pk.install_packages(to_install)
            
        Popen(['chkconfig', 'postgresql', 'on'], stdout=PIPE, stderr=PIPE).communicate()
        
        print "DONE!"
    
    elif (distribution, distribution_version) in apt_packages.keys():
        
        print "Ensuring that the system prerequisites are satisfied...",
        sys.stdout.flush()
        
        Popen(['apt-get', '-y', 'update'], stdout=PIPE, stderr=PIPE).communicate()
        Popen(['apt-get', '-y', 'install'] + apt_packages[(distribution, distribution_version)], stdout=PIPE, stderr=PIPE).communicate()
        
        # Install Virtualenv
        if distribution == 'Ubuntu':
            Popen(['easy_install', '-U', 'virtualenv'], stdout=PIPE, stderr=PIPE).communicate()
        
        print "DONE!"
        
    
    else:
        print "At present, this installer does not support fully automatic installation"
        print "on this platform. Before continuing, you should ensure that you have all"
        print "pre-requisites installed and the database set up as documented at"
        print "http://docs.mollyproject.org/"
        print
        raw_input('Press Enter to continue, or Ctrl+C to exit')
    
    # Create Molly user - silently ignore failures (probably means the user already exists)
    print "Creating 'molly' user...",
    sys.stdout.flush()
    Popen(['useradd', '-r', 'molly'], stdout=PIPE, stderr=PIPE).communicate()
    print "DONE!"

if not options.develop and not options.no_root:
    molly_uid, molly_gid = pwd.getpwnam('molly')[2:4]

if (not options.develop and not options.no_root):
    as_molly = ['sudo', '-u', 'molly']
else:
    as_molly = []

# Do DB setup
postgres_password = None
as_postgres = ['sudo', '-u', 'postgres']
if not upgrading and not options.no_root:    
    if distribution in ('Fedora', 'Ubuntu', 'redhat'):
        print
        print "Molly can install and set up your database for you, if you would like."
        print "Please note that this only works on fresh databases (empty ones), and can"
        print "lead to data loss if done on an installed database. Only do this on a new"
        print "install!"
        do_db_install = config_generator.ask_yes_no('Would you like Molly to configure your database for you?', 'n')
        
        if do_db_install:
            
            if distribution in ('Fedora', 'redhat'):
                print "Initialising Postgres...",
                sys.stdout.flush()
                Popen(['service', 'postgresql', 'initdb'], stdout=PIPE, stderr=PIPE).communicate()
                Popen(['service', 'postgresql', 'start'], stdout=PIPE, stderr=PIPE).communicate()
                print "DONE!"
            
            # Setup PostGIS
            print "Configuring PostGIS...",
            sys.stdout.flush()
            
            # Create the template spatial database.
            Popen(as_postgres + ['createdb','-E','UTF8','template_postgis'], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            
            # Adding PLPGSQL language support.
            Popen(as_postgres + ['createlang','-d','template_postgis','plpgsql'], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            
            try:
                postgis_path = postgis_paths[(distribution, distribution_version)]
            except KeyError:
                postgis_path = postgis_paths[distribution]
            
            # Loading the PostGIS SQL routines
            if distribution == 'redhat':
                Popen(as_postgres + ['psql','-d','template_postgis','-f',os.path.join(postgis_path, 'lwpostgis.sql')], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            else:
                Popen(as_postgres + ['psql','-d','template_postgis','-f',os.path.join(postgis_path, 'postgis.sql')], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            Popen(as_postgres + ['psql','-d','template_postgis','-f',os.path.join(postgis_path, 'spatial_ref_sys.sql')], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            Popen(as_postgres + ['psql','-d','postgres','-c',"UPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis';"], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            
            # Enabling users to alter spatial tables.
            Popen(as_postgres + ['psql','-d','template_postgis','-c','GRANT ALL ON geometry_columns TO PUBLIC;'], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            Popen(as_postgres + ['psql','-d','template_postgis','-c','GRANT ALL ON spatial_ref_sys TO PUBLIC;'], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            print "DONE!"
            
            print "Molly can overwrite your pg_hba.conf file for you, or display a sample"
            print "configuration only. If you are using your Postgresql server for any other"
            print "applications, it is recommended you skip this step and configure your"
            print "pg_hba.conf manually. If you are not using this database for anything else"
            print "it's safe to choose 'y' here."
            print
            
            do_pg_hba_write = config_generator.ask_yes_no('Would you like Molly to overwrite pg_hba.conf?', 'n')
            
            print "Configuring database security...",
            sys.stdout.flush()
            postgres_password = generate_password()
            Popen(as_postgres + ['psql','-c',"CREATE USER molly WITH PASSWORD '%s';" % postgres_password], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            Popen(as_postgres + ['psql','-c',"ALTER ROLE molly WITH PASSWORD '%s';" % postgres_password], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            Popen(as_postgres + ['createdb','-T','template_postgis','molly'], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            Popen(as_postgres + ['psql','-c',"GRANT ALL ON DATABASE molly TO molly;"], stdout=PIPE, stderr=PIPE, cwd='/tmp').communicate()
            
            pg_hba_text = """
# This file was written by the Molly installer
local   molly       molly                             md5
host    molly       molly       127.0.0.1/32          md5
host    molly       molly       ::1/128               md5

# "local" is for Unix domain socket connections only
local   all         all                               ident
# IPv4 local connections:
host    all         all         127.0.0.1/32          ident
# IPv6 local connections:
host    all         all         ::1/128               ident
"""
            
            if do_pg_hba_write:
                pg_hba = open(pg_hba_paths[distribution], 'w')
                pg_hba.write(pg_hba_text)
                pg_hba.close()
            else:
                print "\nBelow is a sample configuration for your pg_hba.conf:"
                print pg_hba_text

            reload_postgres((distribution, distribution_version))
            print "DONE!"
    
    else:
        
        print "Molly can not automatically set up your database on this platform. Please read"
        print "http://docs.mollyproject.org/ to ensure your database is set up correctly"
        print
        raw_input("Press Enter to continue or Ctrl+C to quit.")

# Set up a Virtualenv
if not upgrading:
    print "Creating a virtualenv for Molly...",
    if not options.develop and not options.no_root:
        os.chown(path, molly_uid, molly_gid)
    (stdoutdata, stderrdata) = Popen(as_molly + ['virtualenv', '--python=%s' % sys_python, '--distribute', '--no-site-packages', path], stdout=PIPE, stderr=PIPE, cwd=path).communicate()
    if not os.path.exists(os.path.join(path, 'bin', 'activate')):
        print >>sys.stderr, "Failed"
        print
        print "STDOUT:"
        print stdoutdata
        print
        print "STDERR:"
        print stderrdata
        sys.exit(1)
    print "DONE!"

site = os.path.join(path, 'deploy')
python = os.path.join(path, 'bin', 'python')

# Install our packages
if not upgrading:
    print "Installing Python dependencies:"
    pip = os.path.join(path, 'bin', 'pip')
    for name, package in pip_packages:
        print " * " + name + '...',
        sys.stdout.flush()
        Popen(as_molly + [pip, 'install', '-U', package], stdout=PIPE, cwd=path).communicate()
        print "DONE!"
    print

# Install Molly
print "Installing Molly...",
if not upgrading:
    print "(this may take some time)",
sys.stdout.flush()

if not options.develop and not options.no_root:
    # Copy to a temporary directory to work around permission issues
    temp_dir = tempfile.mkdtemp()
    os.chown(temp_dir, molly_uid, molly_gid)
    molly_temp = os.path.join(temp_dir, 'molly_install')
    shutil.copytree(os.path.normpath(os.path.dirname(__file__)), molly_temp)
    for root, dirs, files in os.walk(temp_dir):
        for file in files + dirs:
            os.chown(os.path.join(root, file), molly_uid, molly_gid)
    molly_setup = os.path.join(molly_temp, 'setup.py')
else:
    molly_setup = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'setup.py')

if options.develop:
    Popen(as_molly + [python, molly_setup, 'develop'], stdout=PIPE, stderr=PIPE, cwd=path).communicate()
else:
    Popen(as_molly + [python, molly_setup, 'install'], stdout=PIPE, stderr=PIPE, cwd=path).communicate()

if not options.develop and not options.no_root:
    shutil.rmtree(temp_dir)
print "DONE!"

if options.site_path is None and not os.path.exists(site):
    print "No site specified, creating a new one..."
    
    # Create site
    Popen(as_molly + [python, os.path.join(path, 'bin', 'django-admin.py'), 'startproject', 'deploy'], cwd=os.path.normpath(os.path.join(site, '..')), stdout=PIPE, stderr=PIPE).communicate()
    
    # Remove settings.py as we're going to generate this ourselves
    os.unlink(os.path.join(site, 'settings.py'))
    os.unlink(os.path.join(site, 'urls.py'))
    
    # Add default directories
    os.mkdir(os.path.join(site, 'templates'))
    if not options.develop and not options.no_root: os.chown(os.path.join(site, 'templates'), molly_uid, molly_gid)
    os.mkdir(os.path.join(site, 'media'))
    if not options.develop and not options.no_root: os.chown(os.path.join(site, 'media'), molly_uid, molly_gid)
    os.mkdir(os.path.join(site, 'site_media'))
    if not options.develop and not options.no_root: os.chown(os.path.join(site, 'site_media'), molly_uid, molly_gid)
    os.mkdir(os.path.join(site, 'apache'))
    if not options.develop and not options.no_root: os.chown(os.path.join(site, 'apache'), molly_uid, molly_gid)
    
    # Create Apache mod_wsgi file
    fd = open(os.path.join(site, 'apache', 'molly.wsgi'), 'w')
    fd.write("""#!/usr/bin/env python

import os, os.path
import sys

os.environ['DJANGO_SETTINGS_MODULE'] = 'deploy.settings'
sys.path.insert(0, os.path.abspath(os.path.join(
os.path.dirname(__file__), '..', '..',
)))

import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()""")
    fd.close()
    if not options.develop and not options.no_root: os.chown(os.path.join(site, 'apache', 'molly.wsgi'), molly_uid, molly_gid)
    
    # Create dummy httpd.conf
    fd = open(os.path.join(site, 'apache', 'molly.conf'), 'w')
    fd.write("""
# This file contains a sample file for Apache to serve Molly using mod_wsgi
# It will need altering according to your specific configuration.
<VirtualHost *:80>
    # Change the following settings as appropriate
    ServerName m.uni.ac.uk
    ServerAdmin molly@example.com

    WSGIDaemonProcess mox user=molly group=molly
    WSGIProcessGroup mox
    WSGIScriptAlias / %s/apache/molly.wsgi

    ErrorLog %s/apache/error.log

    # Possible values include: debug, info, notice, warn, error, crit,
    # alert, emerg.
    LogLevel warn

    CustomLog %s/apache/access.log combined
    
    Alias /media %s/media
    # It is recommended you create these two files and then set up the links
    # as appropriate
    #Alias /robots.txt /path/to/robots.txt
    #Alias /favicon.ico /path/to/favicon.ico

</VirtualHost>""" % (site, site, site, site))
    fd.close()
    if not options.develop and not options.no_root: os.chown(os.path.join(site, 'apache', 'molly.conf'), molly_uid, molly_gid)
    
    # Generate settings
    settings_fd = open(os.path.join(site, 'settings.py'), 'w')
    if postgres_password != None:
        config_generator.main(settings_fd, 'molly', 'molly', postgres_password)
    else:
        config_generator.main(settings_fd)
    settings_fd.close()
    
    if not options.develop and not options.no_root: os.chown(os.path.join(site, 'settings.py'), molly_uid, molly_gid)

elif options.site_path != None:
    
    if options.develop:
        site = os.path.abspath(options.site_path)
    else:
        print "Using", options.site_path, "as site to deploy"
        if os.path.exists(site):
            shutil.rmtree(site)
        shutil.copytree(options.site_path, site)
        if not options.no_root:
            os.chown(site, molly_uid, molly_gid)
            for (dirpath, dirnames, filenames) in os.walk(site):
                for file in filenames + dirnames:
                    os.chown(os.path.join(dirpath, file), molly_uid, molly_gid)

def call_in_virtualenv(path, command, wait=True, devnull=True):
    if wait:
        command = as_molly + ['bash','-c','source %s/bin/activate; %s' % (path, command)]
        if devnull:
            Popen(command, stdout=PIPE, stderr=PIPE, cwd=path).communicate()
        else:
            Popen(command, cwd=path).wait()
    else:
        if devnull:
            command = as_molly + ['bash','-c','source %s/bin/activate; %s >/dev/null' % (path, command)]
        else:
            command = as_molly + ['bash','-c','source %s/bin/activate; %s' % (path, command)]
        Popen(command, cwd=path)

# Determine if our site defines any additional dependencies
if os.path.exists(os.path.join(site, 'requirements.txt')):
    print "Installing site requirements...",
    sys.stdout.flush()
    call_in_virtualenv(path, "%s/bin/pip install -r %s/requirements.txt" % (path, site))
    print "DONE!"

# Determine if we need to do the first migration or not
if postgres_password is None and not options.develop and not options.no_root:
    database = config_generator.ask('What is the name of the database Molly uses?', compulsory=True)
else:
    database = 'molly'

if not options.develop and not options.no_root and Popen(as_postgres + ['psql',database,'-c',"SELECT id FROM south_migrationhistory LIMIT 1;"], stdout=PIPE, stderr=PIPE).wait() > 0:
    # It errored, which probably means the table doesn't exist
    print "Doing first syncdb...",
    sys.stdout.flush()
    call_in_virtualenv(path, "python %s/manage.py syncdb --all" % site, devnull=False)
    call_in_virtualenv(path, "python %s/manage.py migrate --fake;" % site)
    print "DONE!"
    
else:
    # Do a normal sync
    print "Doing syncdb...",
    sys.stdout.flush()
    call_in_virtualenv(path, "python %s/manage.py syncdb; python %s/manage.py migrate;" % (site, site))
    print "DONE!"

print "Building media... (this may take some time)",
sys.stdout.flush()
if not options.develop:
    call_in_virtualenv(path, "python %s/manage.py update_wurfl" % site, wait=False)
    call_in_virtualenv(path, "python %s/manage.py generate_markers" % site)
call_in_virtualenv(path, "python %s/manage.py collectstatic --noinput" % site)
call_in_virtualenv(path, "python %s/manage.py synccompress" % site)
call_in_virtualenv(path, "python %s/manage.py generate_cache_manifest" % site)
call_in_virtualenv(path, "python %s/manage.py create_crontab | crontab" % site)
print "DONE!"

if options.develop:
    call_in_virtualenv(path, 'python %s/manage.py runserver' % site, wait=True, devnull=False)

elif options.site_path is None and not upgrading:
    print
    print "A sample configuration for Molly with Apache has been created in"
    print "%s/apache/molly.conf." % site
    print "The next step is to configure Apache to serve Molly. The Django deployment"
    print "guide may be useful to accomplish this"
    print "(http://docs.djangoproject.com/en/dev/howto/deployment/modwsgi/)"

if not upgrading:
    print
    print "Molly will not work correctly until some data has been imported."
    print "Run your Apache or development server and then to start importing"
    print "data, go to http://yourdomain:yourport/adm/ and log in."
    print "Using your admin username and password, go to 'Batches' and then"
    print "select all the batches, and choose 'Run Batch' from the actions menu."

print
print "Molly installation is complete"
